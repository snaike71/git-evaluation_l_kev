#!/usr/bin/env python3

import sys
import os

def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        raise ValueError("Division by zero is not allowed")
    return a / b

def calculate(expression):
    try:
        compiled_expr = compile(expression, "<string>", "eval")
        return eval(compiled_expr)
    except SyntaxError:
        return "Erreur de syntaxe"
    except ZeroDivisionError:
        return "Division par zÃ©ro"
    except Exception as e:
        return f"Erreur : {str(e)}"

def interactive_mode():
    while True:
        try:
            expression = input("> ")
            if expression.lower() == 'exit':
                print("Fin des calculs")
                break
            result = calculate(expression)
            print(result)
        except Exception as e:
            print(f"Erreur : {e}")

def read_from_stdin():
    for line in sys.stdin:
        if line.strip():  # Ignore empty lines
            try:
                result = calculate(line.strip())
                print(result)
            except Exception as e:
                print(f"Erreur : {e}")

def read_from_test_files():
    test_dir = "test"
    result_dir = "results"
    if not os.path.exists(result_dir):
        os.makedirs(result_dir)
    for filename in os.listdir(test_dir):
        if filename.endswith(".txt"):
            filepath = os.path.join(test_dir, filename)
            with open(filepath, 'r') as file:
                content = file.readlines()
                result_filepath = os.path.join(result_dir, filename.replace(".txt", "-result.txt"))
                with open(result_filepath, 'w') as result_file:
                    for line in content:
                        line = line.strip()
                        if line:  # Ignore empty lines
                            result = calculate(line)
                            result_file.write(f"{result}\n")

def main():
    if not sys.stdin.isatty():
        read_from_stdin()
    elif len(sys.argv) > 1 and sys.argv[1] == '--test':
        read_from_test_files()
    else:
        interactive_mode()

if __name__ == "__main__":
    main()
